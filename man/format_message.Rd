% Generated by roxygen2 (4.0.1): do not edit by hand
\name{format_message}
\alias{format_message}
\alias{format_message.character}
\alias{format_message.data.frame}
\alias{format_message.default}
\title{Construct logging message text}
\usage{
format_message(x, ...)

\method{format_message}{default}(x, appendLF = TRUE, ...)

\method{format_message}{character}(x, appendLF = TRUE, wrap = any(nchar(x) >
  0.9 * getOption("width")), ...)

\method{format_message}{data.frame}(x, ...)
}
\arguments{
\item{x}{the object to put in the log}

\item{appendLF}{(logical) should the message text have a newline
appended at each line}

\item{wrap}{(logical) should the message text first be reformatted
using `strwrap`}

\item{...}{additional arguments passed through to specific methods (see below)}
}
\description{
Generic for constructing the text of logging messages.
}
\details{
These functions provide a convenient way to format logging messages
based on the object being logged. For instance, data frames are
formatted using \code{\link[base]{print.data.frame}}, while text
objects can optionally be formatted using
\code{\link[base]{strwrap}}. When formatting is delegated to these
methods, the caller can control them by passing additional
arguments, such as \code{width} for \code{strwrap}.
}
\section{Methods (by class)}{
\itemize{
\item \code{default}: coerce the argument to character and
concatenate its elements

\item \code{character}: log the character vector optionally
formatting it using \code{\link[base]{strwrap}}

\item \code{data.frame}: log the data frame using
\code{\link[base]{print.data.frame}} to construct in textual
representation
}}
\keyword{internal}

