% Generated by roxygen2 (4.0.1): do not edit by hand
\name{with_logging}
\alias{suppress_logging}
\alias{with_logging}
\title{Manage the current logging context.}
\usage{
with_logging(expr, ..., threshold = NA)

suppress_logging(expr)
}
\arguments{
\item{expr}{expression to be evaluated}

\item{...}{output destinations, see details below}

\item{threshold}{the default level used as the threshold for logging
outputs}
}
\description{
Evaluate an expression within the context of specified logging outputs
}
\details{
This function sets up one or more destinations for logging
messages, optionally each at its own threshold for detail level. It
then evaluates the given expression, and directs each logging
messages sent within the expression to every destination whose
threshold is higher than the message's detail level.

System messages generated by \code{stop}, \code{warning}, and
\code{message} are also recorded in the active destinations, but
then let through for further processing by any other calling
handlers active further up in the call chain. Conversely, if
\code{expr} setups its own calling handlers for those messages, for
instance \code{supressWarnings}, those messages will not be
received by \code{with_logging} because of the mechanics of R's
condition handling system.

Each output destination has to be a file name, a connection object,
or a pair of "(destination, threshold_level)". If no output
destination is given, logging will use \code{stderr()} at the
"INFO" threshold.
}
\section{Functions}{
\itemize{
\item \code{}: Evaluate an expression in a context that turns off all logging
}}
\examples{
with_logging({
  debug_log('entering the logged expression')
  info_log('hello there')
  warn_log('something is amiss')
  debug_log('exiting the logged expression')
})

## output to a file at detailed level and console at INFO
with_logging({
  debug_log('entering the logged expression')
  info_log('hello there')
  warn_log('something is amiss')
  debug_log('exiting the logged expression')
}, list(tempfile(), 'TRACE'), stderr())
}

