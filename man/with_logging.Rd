% Generated by roxygen2 (4.0.1): do not edit by hand
\name{with_logging}
\alias{suppress_logging}
\alias{with_logging}
\title{Manage the current logging context.}
\usage{
with_logging(expr, ..., threshold = "INFO", catch_system_messages = TRUE)

suppress_logging(expr)
}
\arguments{
\item{expr}{expression to be evaluated}

\item{...}{output destinations, see details below}

\item{threshold}{the default level used as the threshold for logging
outputs}

\item{catch_system_messages}{whether `warning` and `message` should
be let through for further processing by upstream active handlers}
}
\description{
Evaluate an expression within the context of specified logging outputs
}
\details{
This function sets up one or more destinations for logging
messages, optionally each at its own threshold for detail level. It
then evaluates the given expression, and directs each logging
messages sent within the expression to every destination whose
threshold is higher than the message's detail level.

Each output destination has to be a file name, a connection object,
or a pair of "(destination, threshold_level)". If no output
destination is given, logging will use \code{stderr()} at the
"INFO" threshold.

System messages generated by \code{stop}, \code{warning}, and
\code{message} are also caught and recorded in the active
destinations, thus easing adoption of existing code. Normally, only
\code{stop} will be let through for standard R error processing;
optionally, if \code{catch_system_messages} is \code{FALSE}, logr
will do the same for \code{warning}s and \code{message}s.
}
\section{Functions}{
\itemize{
\item \code{}: Evaluate an expression in a context that turns off all logging
}}
\note{
If \code{expr} sets up its own calling handlers for system
messages, such as by using \code{supressWarnings}, those messages
will not be received by \code{with_logging} because of the
mechanics of R's condition handling system.
}
\examples{
with_logging({
  debug_log('entering the logged expression')
  info_log('hello there')
  warn_log('something is amiss')
  debug_log('exiting the logged expression')
})

## output to a file at detailed level and console at INFO
with_logging({
  debug_log('entering the logged expression')
  info_log('hello there')
  warn_log('something is amiss')
  debug_log('exiting the logged expression')
}, list(tempfile(), 'TRACE'), stderr())
}

